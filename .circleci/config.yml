# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  android: circleci/android@2.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-unit-test:
    # These next lines define the Android machine image executor.
    # See: https://circleci.com/docs/2.0/executor-types/
    # The Android machine image: https://circleci.com/docs/2.0/android-machine-image/
    executor:
      name: android/android-machine
      resource-class: large
      tag: 2022.01.1

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: Check format
          command: make check-format

      - run:
          name: Assemble phone release
          command: make assemble-phone-release

      - run:
          name: JavaDoc
          command: make javadoc

      - run:
          name: Download Codecov Uploader
          command: |
            curl -s https://codecov.io/bash > codecov;
            VERSION=$(grep 'VERSION=\"[0-9\.]*\"' codecov | cut -d'"' -f2);
            for i in 1 256 512
            do
              shasum -a $i -c --ignore-missing <(curl -s "https://raw.githubusercontent.com/codecov/codecov-bash/${VERSION}/SHA${i}SUM") ||
              shasum -a $i -c <(curl -s "https://raw.githubusercontent.com/codecov/codecov-bash/${VERSION}/SHA${i}SUM" | grep -w "codecov")
            done

      - run:
          name: Run Core unit tests
          command: make core-unit-test-coverage

      - store_test_results:
          path: code/android-core-library/build/test-results/testPhoneDebugUnitTest

      - run:
          name: Upload Core unit test coverage
          command: |            
            bash ./codecov -v -X s3 -c -D "./code/android-core-library/build/reports/coverage/test/phone/debug" -F unit-tests

      - run:
          name: Run Signal unit tests
          command: make signal-unit-test-coverage

      - store_test_results:
          path: code/android-signal-library/build/test-results/testPhoneDebugUnitTest

      - run:
          name: Upload Signal coverage report
          command: |            
            bash ./codecov -v -X s3 -c -D "./code/android-signal-library/build/reports/coverage/test/phone/debug" -F unit-tests

      - run:
          name: Run Lifecycle unit tests
          command: make lifecycle-unit-test-coverage

      - store_test_results:
          path: code/android-lifecycle-library/build/test-results/testPhoneDebugUnitTest

      - run:
          name: Upload Lifecycle coverage report
          command: |            
            bash ./codecov -v -X s3 -c -D "./code/android-lifecycle-library/build/reports/coverage/test/phone/debug" -F unit-tests
          
  functional-test:
      executor:
        name: android/android-machine
        resource-class: large
        tag: 2022.01.1

      steps:
      # Checkout the code as the first step.
        - checkout
        
        - android/start-emulator-and-run-tests:
          #   It should match the name seen in the "sdkmanager --list" output
            system-image: system-images;android-29;default;x86
          #   The command to be run, while waiting for emulator startup
            post-emulator-launch-assemble-command: make assemble-phone
          #   The test command
            test-command: make functional-test
  integration-test:
      executor:
        name: android/android-machine
        resource-class: large
        tag: 2022.01.1

      steps:
      # Checkout the code as the first step.
        - checkout
        
        - android/start-emulator-and-run-tests:
          #   It should match the name seen in the "sdkmanager --list" output
            system-image: system-images;android-29;default;x86
          #   The command to be run, while waiting for emulator startup
            post-emulator-launch-assemble-command: make assemble-phone
          #   The test command
            test-command: make integration-test


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  version: 2
  aepsdk-core-ci: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-unit-test
      #- functional-test
      #- integration-test      
