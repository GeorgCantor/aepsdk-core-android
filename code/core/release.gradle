apply plugin: 'signing'
apply plugin: 'maven-publish'

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set('javadoc')
    from dokkaJavadoc.outputDirectory
}

def isJitPackBuild() {
    return hasProperty('jitpack')
}
def isReleaseBuild() {
    return hasProperty('release')
}

def groupIdForPublish = isJitPackBuild()? 'com.github.adobe.aepsdk-core-android': 'com.adobe.marketing.mobile'

// A class to represent a dependency node to be attached to POM
class DependencyNode {
    final String groupId
    final String artifactId
    final String version

    DependencyNode(final String groupId, final String artifactId, final String version) {
        this.groupId = groupId
        this.artifactId = artifactId
        this.version = version
    }
}

// A list of Dependency objects representing dependencies to be attached to POM
def dependencyList = [
        new DependencyNode("org.jetbrains.kotlin", "kotlin-stdlib-jdk8", "${rootProject.kotlin_version}"),
        new DependencyNode("androidx.appcompat", "appcompat", "1.0.0"),
        new DependencyNode("androidx.compose.runtime", "runtime", "${rootProject.compose_version}"),
        new DependencyNode("androidx.compose.material", "material", "${rootProject.compose_version}"),
        new DependencyNode("androidx.compose.animation", "animation", "1.1.0"),
        new DependencyNode("androidx.activity", "activity-compose", "1.5.0")
]

version = isReleaseBuild() ? rootProject.coreExtensionVersion : rootProject.coreExtensionVersion+"-SNAPSHOT"

publishing {
    publications {
        release(MavenPublication) {
            groupId = groupIdForPublish
            artifactId = rootProject.coreExtensionName
            version = version
            artifact("$buildDir/outputs/aar/${rootProject.coreExtensionAARName}")
            artifact javadocJar
            pom {
                name = rootProject.coreMavenRepoName
                description = rootProject.coreMavenRepoDescription
                url = 'https://developer.adobe.com/client-sdks'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'adobe'
                        name = 'adobe'
                        email = 'adobe-mobile-testing@adobe.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com//adobe/aepsdk-core-android.git'
                    developerConnection = 'scm:git:ssh://github.com//adobe/aepsdk-core-android.git'
                    url = 'https://github.com/adobe/aepsdk-core-android'
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    // loop dependencyList and add each dependency to POM as a node
                    dependencyList.each { dependency ->
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dependency.groupId)
                        dependencyNode.appendNode('artifactId', dependency.artifactId)
                        dependencyNode.appendNode('version', dependency.version)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            url = version.endsWith('SNAPSHOT') ? "https://oss.sonatype.org/content/repositories/snapshots/" : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("SONATYPE_USERNAME")
                password = System.getenv("SONATYPE_PASSWORD")
            }
        }
    }
}
//tasks.withType(Javadoc).all { enabled = false }
publishToMavenLocal.dependsOn('assemblePhone')
publishReleasePublicationToMavenLocal.dependsOn('assemblePhone')
publish.dependsOn('assemblePhone')

ext."signing.gnupg.executable"="gpg"
ext."signing.gnupg.keyName"=System.getenv("GPG_KEY_ID")
ext."signing.gnupg.passphrase"=System.getenv("GPG_PASSPHRASE")

signing {
    useGpgCmd()
    required {
        tasks.withType(PublishToMavenRepository).find {
            gradle.taskGraph.hasTask it
        }
    }
    sign publishing.publications
}